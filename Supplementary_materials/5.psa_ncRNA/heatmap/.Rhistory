install.packages(c("ggplot2","reshape2","ggthemes","viridis","plotrix","grid","dplyr"))
install.packages("cowplot")
source("https://bioconductor.org/biocLite.R")
install.packages("DESeq2")
biocLite("DESeq2")
biocLite("limma")
biocLite("hdf5")
biocLite("hfd5")
install.packages("IRkernel")
IRkernel::installspec()
IRkernel::installspec()
IRkernel::installspec()
install.packages("tximport")
biocLite("tximport")
library(BiocInstaller)
biocLite("tximport")
biocLite("rhdf5")
install.packages("tidyverse")
install.packages("ggrepel")
install.packages("factoextra")
install.packages("FactoMineR")
install.packages("car")
install.packages("factoextra")
twoayggay_fishers <- read.csv("~/Dropbox/PhD/Psa/ncRNA_prediction/manual_annotation/twoAYGGAY/twoayggay_fishers.csv", row.names=1)
View(twoayggay_fishers)
fisher.result <- fisher.test(twoayggay_fishers)
print(fisher.result)
twoayggay_fishers <- read.csv("~/Dropbox/PhD/Psa/ncRNA_prediction/manual_annotation/twoAYGGAY/twoayggay_fishers.csv", row.names=1)
View(twoayggay_fishers)
fisher.result <- fisher.test(twoayggay_fishers)
print(fisher.result)
rm(list=ls())
library(ggplot2)
library(reshape2)
library(ggthemes)
library(viridis)
library(plotrix)
library(grid)
library(dplyr)
library(ggpubr)
library(cowplot)
library(gridExtra)
setwd("~/Dropbox/PhD/Psa/heatmap2")
#all_2.csv - all.csv but columns ordered manually to reflect phylogeny
all <- read.csv("all.csv", header = TRUE)
percIdentity <- data.frame(stringsAsFactors = FALSE)
numAnnotations <- data.frame(data.frame(stringsAsFactors = FALSE))
#Make empty dataframe to store sum of average conservation to rank plot
avgsum <- data.frame(matrix(0,nrow=73, ncol=1))
#Get genera names
#genera ordering is already in correct order
genera <- colnames(all)
for(x in c(1, 24, 24)){
genera <- genera[-x]
}
genera=rev(genera)
for(x in genera){
#For each genus in "all", open relevant file
myFile <- paste(x,".genus.identity", sep='')
myFile <- read.csv(myFile, header=TRUE, row.names=1)
#percIdentity: each genus is row, each column is average seq conservation for that genus
percIdentity <- rbind(colMeans(myFile, na.rm = TRUE), percIdentity)
#numAnnotations: each genus is row, each column is average conservation (ie % of genomes in genus with annotation)
numAnnotations <-rbind(all[,x]/max(all[,x], na.rm=TRUE), numAnnotations)
#Avgsum = sum of annotations for each gene
avgsum <- avgsum + (all[,x]/max(all[,x], na.rm=TRUE))
}
#Sort out column and row names
colnames(percIdentity) <- all$sRNA
colnames(numAnnotations) <- all$sRNA
rownames(percIdentity) <- rev(genera)
rownames(numAnnotations) <- rev(genera)
colnames(avgsum) <- "average"
#Subset of genes that have passed QC
srna_names <- read.table(file = "final_ncRNAs.txt")
tmpnames <- c()
for(x in srna_names$V1){
tmpnames <- c(tmpnames,x)
}
srna_names <-tmpnames
#rankedGenes = give sRNAs values based on num of annotations * sum of conservation for ranking
rankedGenes <-all$Total_annotations*avgsum$average
rankedGenes <-cbind.data.frame(rankedGenes/max(rankedGenes))
rownames(rankedGenes) <- all$sRNA
rankedGenes <-rankedGenes[srna_names,]
#Transpose numAnnotations & percIdentity and rank sRNAs by rankedGenes values
percIdentity <-t(percIdentity)
percIdentity <- percIdentity[srna_names,]
percIdentity <-percIdentity[order(rankedGenes),]
percIdentity.m <- melt(percIdentity)
numAnnotations <- t(numAnnotations)
numAnnotations <- numAnnotations[srna_names,]
numAnnotations <- numAnnotations[order(rankedGenes),]
numAnnotations.m <- melt(numAnnotations)
RNAseq2 <- data.frame(stringsAsFactors = FALSE)
RNAseq <-read.csv(file='RNA_seq.csv',header = FALSE)
######RNAseq <- data.frame(stringsAsFactors = FALSE)
RNAseq2 <- cbind.data.frame(RNAseq)
colnames(RNAseq2) <- c("sRNA","RvS","RvM","MvS")
rownames(RNAseq2) <- all$sRNA
RNAseq2 <- RNAseq2[srna_names,]
RNAseq2 <-RNAseq2[order(rankedGenes),]
RNAseq2.m <- melt(RNAseq2)
RNAseq2.m$sRNA <-factor(RNAseq2.m$sRNA, levels=c(as.vector(row.names(numAnnotations))))
#Plot as heatmap:
#1st layer - presence/absence of annotations from sRNA, genus (all2.m$Var2, all2.m$Var1)
#2nd layer - fill with colour as % sequence identity (identity.m), set alpha to % of genomes annotated for that genus (all2.m$value)
#p1 <-(ggplot(RNAseq2.m, aes(x=RNAseq2.m$sRNA,y=RNAseq2.m$variable))
#  + geom_tile(aes(fill=RNAseq2.m$value),size=0.3)
#  + scale_fill_gradient2(high='Green',low='Red',limits= c(-6,6))
#  + labs(y="",x="")
#  + theme(axis.ticks.x = element_blank(),
#        axis.ticks.y= element_blank(),
#        axis.text.y = element_blank(),
#        axis.text.x=element_blank(),
#        legend.position = "none"
#      )
#  + theme(plot.margin = margin(l=0,t=0,b=-0.8,r=0,unit="cm"))
#)
basemean2 <- data.frame(stringsAsFactors = FALSE)
basemean <-read.csv(file='ncRNA_basemean.csv',header = FALSE)
basemean2 <- cbind.data.frame(basemean)
colnames(basemean2) <- c("sRNA","basemean")
rownames(basemean2) <- basemean$V1
basemean2 <- basemean2[srna_names,]
basemean2 <-basemean2[order(rankedGenes),]
basemean2$sRNA <-factor(basemean2$sRNA, levels=c(as.vector(row.names(numAnnotations))))
#Plot as heatmap:
#1st layer - presence/absence of annotations from sRNA, genus (all2.m$Var2, all2.m$Var1)
#2nd layer - fill with colour as % sequence identity (identity.m), set alpha to % of genomes annotated for that genus (all2.m$value)
p1 <-(ggplot(basemean2, aes(x=basemean2$sRNA,y=1))
+ geom_tile(aes(fill=basemean2$basemean),size=0.3)
+ scale_fill_gradient(low="Red",high="White")
+ labs(y="",x="")
+ scale_fill_gradient2(limits=c(0,1000),low="White",high="black")
+ theme(axis.ticks.x = element_blank(),
axis.ticks.y= element_blank(),
axis.text.y = element_blank(),
axis.text.x=element_blank(),
legend.position = "none"
)
+ theme(plot.margin = margin(l=0,t=0,b=0,r=0,unit="cm"))
)
p_basemean2 <- data.frame(stringsAsFactors = FALSE)
p_basemean <-read.csv(file='in_planta_peak_max.csv',header = FALSE)
p_basemean2 <- cbind.data.frame(p_basemean)
colnames(p_basemean2) <- c("sRNA","basemean")
rownames(p_basemean2) <- p_basemean$V1
p_basemean2 <- p_basemean2[srna_names,]
p_basemean2 <-p_basemean2[order(rankedGenes),]
p_basemean2$sRNA <-factor(p_basemean2$sRNA, levels=c(as.vector(row.names(numAnnotations))))
p2 <-(ggplot(p_basemean2, aes(x=p_basemean2$sRNA,y=1))
+ geom_tile(aes(fill=p_basemean2$basemean),size=0.3)
+ scale_fill_gradient(low="Red",high="White")
+ labs(y="",x="")
+ scale_fill_gradient2(limits=c(0,1000),low="White",high="black")
+ theme(axis.ticks.x = element_blank(),
axis.ticks.y= element_blank(),
axis.text.y = element_blank(),
axis.text.x=element_blank(),
legend.position = "none"
)
+ theme(plot.margin = margin(l=0,t=0,b=0,r=0,unit="cm"))
)
#to-do: fix legends
p3 <- (ggplot(numAnnotations.m, aes(y=numAnnotations.m$Var2, x=numAnnotations.m$Var1))
+ geom_tile(aes(fill=percIdentity.m$value, alpha = numAnnotations.m$value), size= 0.3)
+ scale_alpha_continuous(range = c(0,1.0), name= "sRNA presence in clade (%)", guide=guide_legend(keywidth = 0.4, keyheight=0.4,legend.position = "right", title.position = "left", label.theme = element_text(size=1, angle =90), title.theme = element_text(size=1.2,angle=90)))
+ scale_fill_gradient(high= "Blue", low = "Red",name = "Average % sequence identity\n(relative to starting sequence)",guide=guide_colourbar(barwidth = 0.3, barheight=1.7, legend.position="right", title.position="left",label.theme = element_text(size=0.7, angle =90), title.theme = element_text(size=1, angle=90), title.hjust = 0.01))
+ labs(y="", x="")
+ theme_tufte(base_family = "Helvetica")
+ theme(axis.ticks.x = element_blank(), axis.ticks.y= element_blank())
# + theme(axis.text.y= element_blank())
+ theme(axis.text.x= element_text(angle=-90,size=3.5))
+ theme(legend.position = "none")
+ theme(plot.margin = margin(l=0,t=-0.8,b=0,r=0,unit="cm"))
)
p3
#p <- plot_grid(p1,p2,p3,ncol=1,align="v",axis="none",rel_heights = c(0.1,0.1,0.8))
p <- plot_grid(p1,p2,p3,ncol=1,align="v",axis="none",rel_heights = c(0.1,0.1,0.8))
p
rm(list=ls())
library(ggplot2)
library(reshape2)
library(ggthemes)
library(viridis)
library(plotrix)
library(grid)
library(dplyr)
library(ggpubr)
library(cowplot)
library(gridExtra)
setwd("~/Dropbox/PhD/Psa/heatmap2")
#all_2.csv - all.csv but columns ordered manually to reflect phylogeny
all <- read.csv("all.csv", header = TRUE)
percIdentity <- data.frame(stringsAsFactors = FALSE)
numAnnotations <- data.frame(data.frame(stringsAsFactors = FALSE))
#Make empty dataframe to store sum of average conservation to rank plot
avgsum <- data.frame(matrix(0,nrow=73, ncol=1))
#Get genera names
#genera ordering is already in correct order
genera <- colnames(all)
for(x in c(1, 24, 24)){
genera <- genera[-x]
}
genera=rev(genera)
for(x in genera){
#For each genus in "all", open relevant file
myFile <- paste(x,".genus.identity", sep='')
myFile <- read.csv(myFile, header=TRUE, row.names=1)
#percIdentity: each genus is row, each column is average seq conservation for that genus
percIdentity <- rbind(colMeans(myFile, na.rm = TRUE), percIdentity)
#numAnnotations: each genus is row, each column is average conservation (ie % of genomes in genus with annotation)
numAnnotations <-rbind(all[,x]/max(all[,x], na.rm=TRUE), numAnnotations)
#Avgsum = sum of annotations for each gene
avgsum <- avgsum + (all[,x]/max(all[,x], na.rm=TRUE))
}
#Sort out column and row names
colnames(percIdentity) <- all$sRNA
colnames(numAnnotations) <- all$sRNA
rownames(percIdentity) <- rev(genera)
rownames(numAnnotations) <- rev(genera)
colnames(avgsum) <- "average"
#Subset of genes that have passed QC
srna_names <- read.table(file = "final_ncRNAs.txt")
tmpnames <- c()
for(x in srna_names$V1){
tmpnames <- c(tmpnames,x)
}
srna_names <-tmpnames
#rankedGenes = give sRNAs values based on num of annotations * sum of conservation for ranking
rankedGenes <-all$Total_annotations*avgsum$average
rankedGenes <-cbind.data.frame(rankedGenes/max(rankedGenes))
rownames(rankedGenes) <- all$sRNA
rankedGenes <-rankedGenes[srna_names,]
#Transpose numAnnotations & percIdentity and rank sRNAs by rankedGenes values
percIdentity <-t(percIdentity)
percIdentity <- percIdentity[srna_names,]
percIdentity <-percIdentity[order(rankedGenes),]
percIdentity.m <- melt(percIdentity)
numAnnotations <- t(numAnnotations)
numAnnotations <- numAnnotations[srna_names,]
numAnnotations <- numAnnotations[order(rankedGenes),]
numAnnotations.m <- melt(numAnnotations)
RNAseq2 <- data.frame(stringsAsFactors = FALSE)
RNAseq <-read.csv(file='RNA_seq.csv',header = FALSE)
######RNAseq <- data.frame(stringsAsFactors = FALSE)
RNAseq2 <- cbind.data.frame(RNAseq)
colnames(RNAseq2) <- c("sRNA","RvS","RvM","MvS")
rownames(RNAseq2) <- all$sRNA
RNAseq2 <- RNAseq2[srna_names,]
RNAseq2 <-RNAseq2[order(rankedGenes),]
RNAseq2.m <- melt(RNAseq2)
RNAseq2.m$sRNA <-factor(RNAseq2.m$sRNA, levels=c(as.vector(row.names(numAnnotations))))
#Plot as heatmap:
#1st layer - presence/absence of annotations from sRNA, genus (all2.m$Var2, all2.m$Var1)
#2nd layer - fill with colour as % sequence identity (identity.m), set alpha to % of genomes annotated for that genus (all2.m$value)
#p1 <-(ggplot(RNAseq2.m, aes(x=RNAseq2.m$sRNA,y=RNAseq2.m$variable))
#  + geom_tile(aes(fill=RNAseq2.m$value),size=0.3)
#  + scale_fill_gradient2(high='Green',low='Red',limits= c(-6,6))
#  + labs(y="",x="")
#  + theme(axis.ticks.x = element_blank(),
#        axis.ticks.y= element_blank(),
#        axis.text.y = element_blank(),
#        axis.text.x=element_blank(),
#        legend.position = "none"
#      )
#  + theme(plot.margin = margin(l=0,t=0,b=-0.8,r=0,unit="cm"))
#)
basemean2 <- data.frame(stringsAsFactors = FALSE)
basemean <-read.csv(file='ncRNA_basemean.csv',header = FALSE)
basemean2 <- cbind.data.frame(basemean)
colnames(basemean2) <- c("sRNA","basemean")
rownames(basemean2) <- basemean$V1
basemean2 <- basemean2[srna_names,]
basemean2 <-basemean2[order(rankedGenes),]
basemean2$sRNA <-factor(basemean2$sRNA, levels=c(as.vector(row.names(numAnnotations))))
#Plot as heatmap:
#1st layer - presence/absence of annotations from sRNA, genus (all2.m$Var2, all2.m$Var1)
#2nd layer - fill with colour as % sequence identity (identity.m), set alpha to % of genomes annotated for that genus (all2.m$value)
p1 <-(ggplot(basemean2, aes(x=basemean2$sRNA,y=1))
+ geom_tile(aes(fill=basemean2$basemean),size=0.3)
+ scale_fill_gradient(low="Red",high="White")
+ labs(y="",x="")
+ scale_fill_gradient2(limits=c(0,1000),low="White",high="black")
+ theme(axis.ticks.x = element_blank(),
axis.ticks.y= element_blank(),
axis.text.y = element_blank(),
axis.text.x=element_blank(),
legend.position = "none"
)
+ theme(plot.margin = margin(l=0,t=0,b=0,r=0,unit="cm"))
)
p_basemean2 <- data.frame(stringsAsFactors = FALSE)
p_basemean <-read.csv(file='in_planta_peak_max.csv',header = FALSE)
p_basemean2 <- cbind.data.frame(p_basemean)
colnames(p_basemean2) <- c("sRNA","basemean")
rownames(p_basemean2) <- p_basemean$V1
p_basemean2 <- p_basemean2[srna_names,]
p_basemean2 <-p_basemean2[order(rankedGenes),]
p_basemean2$sRNA <-factor(p_basemean2$sRNA, levels=c(as.vector(row.names(numAnnotations))))
p2 <-(ggplot(p_basemean2, aes(x=p_basemean2$sRNA,y=1))
+ geom_tile(aes(fill=p_basemean2$basemean),size=0.3)
+ scale_fill_gradient(low="Red",high="White")
+ labs(y="",x="")
+ scale_fill_gradient2(limits=c(0,1000),low="White",high="black")
+ theme(axis.ticks.x = element_blank(),
axis.ticks.y= element_blank(),
axis.text.y = element_blank(),
axis.text.x=element_blank(),
legend.position = "none"
)
+ theme(plot.margin = margin(l=0,t=0,b=0,r=0,unit="cm"))
)
#to-do: fix legends
p3 <- (ggplot(numAnnotations.m, aes(y=numAnnotations.m$Var2, x=numAnnotations.m$Var1))
+ geom_tile(aes(fill=percIdentity.m$value, alpha = numAnnotations.m$value), size= 0.3)
+ scale_alpha_continuous(range = c(0,1.0), name= "sRNA presence in clade (%)", guide=guide_legend(keywidth = 0.4, keyheight=0.4,legend.position = "right", title.position = "left", label.theme = element_text(size=1, angle =90), title.theme = element_text(size=1.2,angle=90)))
+ scale_fill_gradient(high= "Blue", low = "Red",name = "Average % sequence identity\n(relative to starting sequence)",guide=guide_colourbar(barwidth = 0.3, barheight=1.7, legend.position="right", title.position="left",label.theme = element_text(size=0.7, angle =90), title.theme = element_text(size=1, angle=90), title.hjust = 0.01))
+ labs(y="", x="")
+ theme_tufte(base_family = "Helvetica")
+ theme(axis.ticks.x = element_blank(), axis.ticks.y= element_blank())
# + theme(axis.text.y= element_blank())
+ theme(axis.text.x= element_text(angle=-90,size=3.5))
+ theme(legend.position = "none")
+ theme(plot.margin = margin(l=0,t=-0.8,b=0,r=0,unit="cm"))
)
#p3
#p <- plot_grid(p1,p2,p3,ncol=1,align="v",axis="none",rel_heights = c(0.1,0.1,0.8))
p <- plot_grid(p1,p2,p3,ncol=1,align="v",axis="none",rel_heights = c(0.1,0.1,0.8))
p
